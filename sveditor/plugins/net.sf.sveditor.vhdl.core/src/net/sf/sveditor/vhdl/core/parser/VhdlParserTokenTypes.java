// $ANTLR 2.7.7 (2006-11-01): "vhdl.g" -> "VhdlLexer.java"$

package net.sf.sveditor.vhdl.core.parser;

public interface VhdlParserTokenTypes {
	int EOF = 1;
	int NULL_TREE_LOOKAHEAD = 3;
	int K_ACCESS = 4;
	int K_OPEN = 5;
	int LPAREN = 6;
	int RPAREN = 7;
	int PLUS = 8;
	int MINUS = 9;
	int AND = 10;
	int COMMA = 11;
	int K_ALIAS = 12;
	int COLON = 13;
	int K_IS = 14;
	int SEMI = 15;
	int K_NEW = 16;
	int K_ARCHITECTURE = 17;
	int K_OF = 18;
	int K_BEGIN = 19;
	int K_END = 20;
	int K_ASSERT = 21;
	int K_REPORT = 22;
	int K_SEVERITY = 23;
	int EQGRT = 24;
	int K_ATTRIBUTE = 25;
	int TIC_SIMPLE_NAME = 26;
	int BASED_LITERAL = 27;
	int K_USE = 28;
	int BIT_STRING_LITERAL = 29;
	int K_FOR = 30;
	int K_GROUP = 31;
	int K_BLOCK = 32;
	int K_CASE = 33;
	int K_WHEN = 34;
	int CHARACTER_LITERAL = 35;
	int K_OTHERS = 36;
	int BAR = 37;
	int K_COMPONENT = 38;
	int K_POSTPONED = 39;
	int K_UNTIL = 40;
	int LSTEQ = 41;
	int K_ELSE = 42;
	int K_CONFIGURATION = 43;
	int K_CONSTANT = 44;
	int COLONEQ = 45;
	int K_ARRAY = 46;
	int DECIMAL_LITERAL = 47;
	int K_TRANSPORT = 48;
	int K_REJECT = 49;
	int K_INERTIAL = 50;
	int K_TO = 51;
	int K_DOWNTO = 52;
	int K_DISCONNECT = 53;
	int K_AFTER = 54;
	int K_ENTITY = 55;
	int K_PROCEDURE = 56;
	int K_TYPE = 57;
	int K_SIGNAL = 58;
	int K_LABEL = 59;
	int K_FUNCTION = 60;
	int K_SUBTYPE = 61;
	int K_VARIABLE = 62;
	int K_LITERAL = 63;
	int K_PACKAGE = 64;
	int K_UNITS = 65;
	int LSTGRT = 66;
	int K_ALL = 67;
	int K_EXIT = 68;
	int K_AND = 69;
	int K_OR = 70;
	int K_XOR = 71;
	int K_NAND = 72;
	int K_NOR = 73;
	int K_XNOR = 74;
	int STAR2 = 75;
	int K_ABS = 76;
	int K_NOT = 77;
	int K_FILE = 78;
	int K_GENERATE = 79;
	int K_IF = 80;
	int K_GENERIC = 81;
	int K_MAP = 82;
	int BASIC_IDENTIFIER = 83;
	int EXTENDED_IDENTIFIER = 84;
	int K_THEN = 85;
	int K_ELSIF = 86;
	int K_RANGE = 87;
	int K_IN = 88;
	int K_BUS = 89;
	int K_WHILE = 90;
	int K_LIBRARY = 91;
	int K_BODY = 92;
	int K_NULL = 93;
	int K_LOOP = 94;
	int K_OUT = 95;
	int K_INOUT = 96;
	int K_BUFFER = 97;
	int K_LINKAGE = 98;
	int STAR = 99;
	int SLASH = 100;
	int K_MOD = 101;
	int K_REM = 102;
	int DOT = 103;
	int TIC = 104;
	int K_NEXT = 105;
	int K_PORT = 106;
	int K_PROCESS = 107;
	int K_PROTECTED = 108;
	int K_RECORD = 109;
	int EQ = 110;
	int SLASHEQ = 111;
	int LST = 112;
	int GRT = 113;
	int GRTEQ = 114;
	int K_RETURN = 115;
	int K_WITH = 116;
	int K_SELECT = 117;
	int K_ON = 118;
	int K_WAIT = 119;
	int K_SLL = 120;
	int K_SRL = 121;
	int K_SLA = 122;
	int K_SRA = 123;
	int K_ROL = 124;
	int K_ROR = 125;
	int K_REGISTER = 126;
	int LBRACK = 127;
	int RBRACK = 128;
	int STRING_LITERAL = 129;
	int K_PURE = 130;
	int K_IMPURE = 131;
	int K_SHARED = 132;
	int K_UNAFFECTED = 133;
	int K_GUARDED = 134;
	int QUOTE = 135;
	int POUND = 136;
	int USCORE = 137;
	int EXCL = 138;
	int DOLLAR = 139;
	int PCNT = 140;
	int AT = 141;
	int QMARK = 142;
	int BSLASH = 143;
	int CARET = 144;
	int BTIC = 145;
	int LCURLY = 146;
	int RCURLY = 147;
	int TILDE = 148;
	int WS = 149;
	int NEWLINE = 150;
	int COMMENT = 151;
	int BASED_OR_DECIMAL = 152;
	int BASE_SPECIFIER = 153;
	int BASED_INTEGER = 154;
	int EXTENDED_DIGIT = 155;
	int BASIC_GRAPHIC_CHARACTER_BASE = 156;
	int GRAPHIC_CHARACTER_BASE = 157;
	int GRAPHIC_CHARACTER = 158;
	int BIT_VALUE = 159;
	int DIGIT = 160;
	int EXPONENT = 161;
	int LOWER_CASE_LETTER = 162;
	int LETTER = 163;
	int INTEGER = 164;
}
